--Esta propuesta de la entidad de carretera va en conjunto conel ClockDisplay de uso genérico y su case con un vector de 4 bits
--Además, se agrega un propueta de condicionales para que la pared se devuelva

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity Carretera is
  PORT( 
        rst, clk: IN std_logic;
        FlagIzqPos, FlagDerPos: OUT std_logic_vector(2 downto 0); --Definimos 4 salidas, dos para las dos posiciones de las paredes y otras dos para, dentro de cada posición, el ladoi izquierdo o derecho de cada pared.
        FlagIzqLado, FlagDerLado: OUT std_logic 
  );
end Carretera;

architecture Behavioral of Carretera is

COMPONENT ClockDisplay is
generic (TIMER, WIDTH: INTEGER); --FRECUENCIA DE NUESTROS RELOJES INDIVIDUALES;
port (
    clk: in STD_LOGIC;
    Selector: out STD_LOGIC_VECTOR (WIDTH-1 DOWNTO 0) --La señal que va a cambiar segun el reloj dividido.
);
END COMPONENT;

SIGNAL SFlagIzqPos, SFlagDerPos: std_logic_vector(2 downto 0);
SIGNAL SFlagIzqLado, SFlagDerLado: std_logic; 
SIGNAL SelectorD: STD_LOGIC_VECTOR(3 DOWNTO 0); --salida del divisor del reloj para las paredes automáticas
SIGNAL Retorno: STD_LOGIC := '0';
BEGIN

inst_clkparedes: ClockDisplay
                 GENERIC MAP (TIMER => 300000000, WIDTH => 4)
                 PORT MAP( Selector => SelectorD,
                           clk => clk); 
PROCESS (clk, rst)
BEGIN

IF rst='0' THEN --Con el reset regresamos el reset a la primera posición definida
--Primera iteración

FlagDerPos <= "000";
FlagDerLado <= '1';
FlagIzqPos <= "010";
FlagIzqLado <= '0';

--WAIT for 3000 ms;

ELSIF rst/='0' THEN
      CASE SelectorD IS --case para mover automáticamente las paredes
          WHEN "0000" =>
                IF (Retorno = '0') THEN
                    FlagDerPos <= "000";
                    FlagDerLado <= '1';
                    FlagIzqPos <= "010";
                    FlagIzqLado <= '0';
                ELSE
                    FlagDerPos <= "101";
                    FlagDerLado <= '1';
                    FlagIzqPos <= "111";
                    FlagIzqLado <= '0';
                END IF;
          WHEN "0001" =>
                IF (Retorno = '0') THEN
                    FlagDerPos <= "000";
                    FlagDerLado <= '0';
                    FlagIzqPos <= "011";
                    FlagIzqLado <= '1';
                ELSE   
                    FlagDerPos <= "100";
                    FlagDerLado <= '0';
                    FlagIzqPos <= "111";
                    FlagIzqLado <= '1'; 
                END IF;
          WHEN "0010" =>
                IF (Retorno = '0') THEN
                    FlagDerPos <= "001";
                    FlagDerLado <= '1';
                    FlagIzqPos <= "011";
                    FlagIzqLado <= '0';
                ELSE
                    FlagDerPos <= "100";
                    FlagDerLado <= '1';
                    FlagIzqPos <= "110";
                    FlagIzqLado <= '0';
                END IF;
          WHEN "0011" =>
                IF (Retorno = '0') THEN
                    FlagDerPos <= "001";
                    FlagDerLado <= '0';
                    FlagIzqPos <= "100";
                    FlagIzqLado <= '1';
                ELSE
                    FlagDerPos <= "011";
                    FlagDerLado <= '0';
                    FlagIzqPos <= "110";
                    FlagIzqLado <= '1';
                 END IF;
          WHEN "0100" =>
                 IF (Retorno = '0') THEN
                    FlagDerPos <= "010";
                    FlagDerLado <= '1';
                    FlagIzqPos <= "100";
                    FlagIzqLado <= '0';
                 ELSE
                    FlagDerPos <= "011";
                    FlagDerLado <= '1';
                    FlagIzqPos <= "101";
                    FlagIzqLado <= '0';
                 END IF;
          WHEN "0101" =>
                FlagDerPos <= "010";
                FlagDerLado <= '0';
                FlagIzqPos <= "101";
                FlagIzqLado <= '1';
          WHEN "0110" =>
                IF (Retorno = '0') THEN
                    FlagDerPos <= "011";
                    FlagDerLado <= '1';
                    FlagIzqPos <= "101";
                    FlagIzqLado <= '0';
                ELSE
                    FlagDerPos <= "010";
                    FlagDerLado <= '1';
                    FlagIzqPos <= "100";
                    FlagIzqLado <= '0';
                 END IF;
          WHEN "0111" =>
                IF (Retorno = '0') THEN 
                    FlagDerPos <= "011";
                    FlagDerLado <= '0';
                    FlagIzqPos <= "110";
                    FlagIzqLado <= '1';
                ELSE
                    FlagDerPos <= "001";
                    FlagDerLado <= '0';
                    FlagIzqPos <= "100";
                    FlagIzqLado <= '1';
                END IF;
          WHEN "1000" =>
                IF (Retorno = '0') THEN
                    FlagDerPos <= "100";
                    FlagDerLado <= '1';
                    FlagIzqPos <= "110";
                    FlagIzqLado <= '0';
                 ELSE
                    FlagDerPos <= "001";
                    FlagDerLado <= '1';
                    FlagIzqPos <= "011";
                    FlagIzqLado <= '0';
                 END IF;
          WHEN "1001" => 
                IF (Retorno = '0') THEN
                    FlagDerPos <= "100";
                    FlagDerLado <= '0';
                    FlagIzqPos <= "111";
                    FlagIzqLado <= '1';
                ELSE
                    FlagDerPos <= "000";
                    FlagDerLado <= '0';
                    FlagIzqPos <= "011";
                    FlagIzqLado <= '1';
                END IF;
          WHEN "1010" =>
                IF (Retorno = '0') THEN
                    FlagDerPos <= "101";
                    FlagDerLado <= '1';
                    FlagIzqPos <= "111";
                    FlagIzqLado <= '0';
                ELSE
                    FlagDerPos <= "000";
                    FlagDerLado <= '1';
                    FlagIzqPos <= "010";
                    FlagIzqLado <= '0';
                 END IF;
          WHEN others =>
                     Retorno <= not(Retorno);
END CASE;


--WAIT for 3000 ms;

END IF;
END PROCESS;
END ARCHITECTURE;
