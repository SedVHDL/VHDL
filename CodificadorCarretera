-- El proposito de este modulo es transformar la manera de manejar los flags de la carretera: pasar de utilizar dos señales para cada limite
-- a utilizar una unica señal para cada lado.

-- El uso esta entidad requiere retocar la entidad TOP ya que ahora los componentes iran conectados de diferente manera
-- (Poner entidad Carretera, despues entidad CodificadorCarretera y esta ultima es la que irá conectada a Refresh)
-- Hecho esto, podemos escribir el comportamiento de la Carretera en la entidad Carretera con una notacion de mayor nivel (con 2 señales de enteros en vez de 4 señales de bits).

-- Numero máximo de posiciones:
--  15      14      13      12      11      10      9       8       7       6       5       4       3       2       1       0     (Posicion)
--  111 0   111 1   110 0   110 1   101 0   101 1   100 0   100 1   011 0   011 1   010 0   010 1   001 0   001 1   000 0   000 1 ([Posicion][lado])


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity Carretera is
  PORT( 
        rst, clk: IN std_logic;
        PosicionI : IN INTEGER RANGE 5 to 15; -- Posicion del limite izquierdo a codificar
        PosicionD: IN INTENGER RANGE 0 to 10; -- Posicion del limite derecho a codificar
        
        --Definimos 4 salidas, dos para las dos posiciones de las paredes y otras dos para, dentro de cada posición, el ladoi izquierdo o derecho de cada pared.
        FlagIzqPos: OUT std_logic_vector(2 downto 0); 
        FlagDerPos: OUT std_logic_vector(2 downto 0); 
        FlagIzqLado: OUT std_logic;
        FlagDerLado: OUT std_logic 
  );
end Carretera;

architecture Behavioral of Carretera is

COMPONENT ClockDisplay is
generic (TIMER: INTEGER); --FRECUENCIA DE NUESTROS RELOJES INDIVIDUALES;
port (
    clk: in STD_LOGIC;
    Selector: out STD_LOGIC_VECTOR (2 DOWNTO 0) --La señal que va a cambiar segun el reloj dividido.
);
END COMPONENT;

--Lo nuevo:
SIGNAL PosicionI: INTEGER RANGE 5 to 15; -- La minima posicion que podrá tomarel limite izquierdo es 5 y la maxima 15.
SIGNAL PosicionD: INTEGER RANGE 0 to 10; -- La minima posicion que podrá tomar el limite derecho es 0 y la maxima 10.

BEGIN

  PROCESS (clk)
  BEGIN
    IF clk'event AND clk='1' THEN
      CASE PosicionI IS --case para codificar posicion del Limite Izquierdo
      
          --  15      14      13      12      11      10      9       8       7       6       5       4       3       2       1       0     (Posicion)
          --  111 0   111 1   110 0   110 1   101 0   101 1   100 0   100 1   011 0   011 1   010 0   010 1   001 0   001 1   000 0   000 1 ([Posicion][lado])
          WHEN 5 =>
                FlagIzqPos <= "010";
                FlagIzqLado <= '0';
          WHEN 6 =>
                FlagIzqPos <= "011";
                FlagIzqLado <= '1';
          WHEN 7 =>
                FlagIzqPos <= "011";
                FlagIzqLado <= '0';
          WHEN 8 =>
                FlagIzqPos <= "100";
                FlagIzqLado <= '1';
          WHEN 9 =>
                FlagIzqPos <= "100";
                FlagIzqLado <= '0';
          WHEN 10 =>
                FlagIzqPos <= "101";
                FlagIzqLado <= '1';
          WHEN 11 =>
                FlagIzqPos <= "101";
                FlagIzqLado <= '0';
          WHEN 12 =>
                FlagIzqPos <= "110";
                FlagIzqLado <= '1';
          WHEN 13 =>
                FlagIzqPos <= "110";
                FlagIzqLado <= '0';
          WHEN 14 =>
                FlagIzqPos <= "111";
                FlagIzqLado <= '1';
          WHEN 15 =>
                FlagIzqPos <= "111";
                FlagIzqLado <= '0';
          WHEN others =>
      END CASE;

      CASE PosicionD IS --case para codificar posicion del Limite Derecho
          WHEN 0 =>
                FlagDerPos <= "000";
                FlagDerLado <= '1';
          WHEN 1 =>
                FlagDerPos <= "000";
                FlagDerLado <= '0';
          WHEN 2 =>
                FlagDerPos <= "001";
                FlagDerLado <= '1';
          WHEN 3 =>
                FlagDerPos <= "001";
                FlagDerLado <= '0';
          WHEN 4 =>
                FlagDerPos <= "010";
                FlagDerLado <= '1';
          WHEN 5 =>
                FlagDerPos <= "010";
                FlagDerLado <= '0';
          WHEN 6 =>
                FlagDerPos <= "011";
                FlagDerLado <= '1';
          WHEN 7 =>
                FlagDerPos <= "011";
                FlagDerLado <= '0';
          WHEN 8 =>
                FlagDerPos <= "100";
                FlagDerLado <= '1';
          WHEN 9 =>
                FlagDerPos <= "100";
                FlagDerLado <= '0';
          WHEN 10 =>
                FlagDerPos <="101";
                FlagDerLado <='1';
          WHEN others =>
       END CASE;
    END IF;
  END PROCESS;
END ARCHITECTURE;
