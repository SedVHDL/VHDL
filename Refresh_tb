library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity Refresh_tb is
--  Port ( );
end Refresh_tb;

architecture Behavioral of Refresh_tb is

SIGNAL clk_tb, rst_tb: STD_LOGIC := '0';
SIGNAL lvlsel_tb, flagIL_tb, flagDL_tb, fracaso_tb: STD_LOGIC; 
SIGNAL EstadoIN_tb, flagC_tb, flagIP_tb, flagDP_tb: STD_LOGIC_VECTOR (2 DOWNTO 0);
SIGNAL SelectorIN_tb: STD_LOGIC_VECTOR (2 DOWNTO 0) := "000";
SIGNAL SelectorOUT_tb, Segmentos_tb: STD_LOGIC_VECTOR (7 DOWNTO 0);

COMPONENT refresh is
    Port (
        clk: IN STD_LOGIC;
        rst: IN STD_LOGIC;
        EstadoIN: IN STD_LOGIC_VECTOR(2 DOWNTO 0); -- el estado que le envia MENU.
        lvlsel: IN STD_LOGIC; -- El nivel que se vaya a seleccionar, el 1 o el 2. Es la señal de la que van a depender los dos segmentos pequeños a los lados de 1 o de 2.
        flagC: IN STD_LOGIC_VECTOR(2 DOWNTO 0); -- Flag indicador de posicion del coche.
        flagIpos: IN STD_LOGIC_VECTOR(2 DOWNTO 0); -- Flag indicador de display (Limite izquierdo).
        flagDpos: IN STD_LOGIC_VECTOR(2 DOWNTO 0); -- Flag indicador de display (Limite derecho).
        flagIlado: IN STD_LOGIC; -- Flag infdicador de lado dentro de un display (Para el lado izquierdo).
        flagDlado: IN STD_LOGIC; -- Flag infdicador de lado dentro de un display (Para el lado derecho).
        SelectorIN: IN STD_LOGIC_VECTOR(2 DOWNTO 0);  -- El selector que entra al controlador en formato de 3 bits, es el puntero refresh con el que refresh va pasando por cada display.
        SelectorOUT: OUT STD_LOGIC_VECTOR(7 DOWNTO 0); -- Señal de selector para Constraits.
        Segmentos: OUT STD_LOGIC_VECTOR(7 DOWNTO 0); -- Señal de segmentos para Constraits.
        fracaso: OUT STD_LOGIC -- Va a enviar a menu si has perdido ya o no.
         );
END COMPONENT;

begin

inst_refresh: refresh
    PORT MAP (
        
            clk => clk_tb,
            rst => rst_tb,
            EstadoIN => EstadoIN_tb,
            lvlsel => lvlsel_tb,
            flagC => flagC_tb,
            flagIpos => flagIP_tb,
            flagDpos => flagDP_tb,
            flagIlado => flagIL_tb,
            flagDlado => flagDL_tb,
            SelectorIN => SelectorIN_tb,
            SelectorOUT => SelectorOut_tb,
            Segmentos => Segmentos_tb,
            fracaso => fracaso_tb);

rst_tb <= '1' after 15 ms;
clk_tb <= not(clk_tb) after 10 ms;
lvlsel_tb <= '0';

PROCESS
BEGIN

wait for 10 ms;
SelectorIN_tb <= "000";
SelectorIN_tb <= "001";
SelectorIN_tb <= "010";
SelectorIN_tb <= "011";
SelectorIN_tb <= "100";
SelectorIN_tb <= "101";
SelectorIN_tb <= "110";
SelectorIN_tb <= "111";


END PROCESS;

PROCESS
BEGIN

wait for 10 ms;
EstadoIN_tb <= "000";

wait for 20 ms; --Probando la condición de perder y volver al menú
EstadoIN_tb <= "010";
flagC_tb <= "010";
FlagDP_tb <= "100";

wait for 30 ms;
EstadoIN_tb <= "000";

wait for 40 ms;
EstadoIN_tb <= "001";
flagC_tb <= "010";
FlagDP_tb <= "100";

wait for 50 ms;
EstadoIN_tb <= "000";




END PROCESS;

end Behavioral;
