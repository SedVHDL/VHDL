library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity ClockDisplay is
generic (TIMER: INTEGER); --FRECUENCIA DE NUESTROS RELOJES INDIVIDUALES
port (
    clk: in STD_LOGIC;
    Selector: out STD_LOGIC_VECTOR (3 DOWNTO 0) --La seÃ±al que va a cambiar segun el reloj dividido.
);
end ClockDisplay;

architecture behav of ClockDisplay is
    constant max_refresh_count: INTEGER := TIMER; 
    signal refresh_count: INTEGER range 0 to max_refresh_count;
    signal refresh_state: STD_LOGIC_VECTOR(3 downto 0) := (others => '0');
	
begin

    gen_clock: process(clk)
    begin
        if clk'event and clk='1' then
	    -- contador TIMER (Para cambiar las paredes de displays)
	      if refresh_count < max_refresh_count then
		  refresh_count <= refresh_count + 1;
	    else
		  refresh_state <= refresh_state + 1;
		  refresh_count <= 0; 
          end if; 
        end if; 
        Selector <= refresh_state;
    end process; 
 END behav;
